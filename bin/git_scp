#!/usr/bin/perl

=head1 NAME

    git_scp - copy modified/added files from local machine to remote machine

=head1 SYNOPSIS

    git_scp [options] [regex]

     Options:
       --base           Base directory to copy files to on remote machine.
                            Defaults to the same path on remote machine as on this one.
       --blacklist      Do not copy files that match this regular expression.
       --help|-?        This help message.
       --hostname       Remote machine to copy files to.
                            Defaults to ENV{GIT_SCP_HOSTNAME} if available.
       --interactive    Choose files to transfer interactively.
       --modified_only  Copy only those files which are marked as 'modified' by git and not new or deleted.
       --print_only|-n  Dry-run. Do not copy, just print what would happen.
       --regex          Copy only the files that match this regular expression.
                            This is the default option.
       --ssh_options    Use these options when copying.
                            Defaults to ENV{GIT_SCP_SSH_OPTIONS}.
       --username       Use this username on remote machine when copying the files.
                            Defaults to ENV{GIT_SCP_HOSTNAME} or the current username.
       --verbose        Print extra information.

=head1 NORMAL USAGE

The purpose of this script is to copy any of the files that are currently modified or added to your
local repository to a remote copy of the repository. This is to facilitate working locally in a
cloud-dev environment.

To set this script up, it will be useful for you to set two environment variables:

    GIT_SCP_HOSTNAME

=cut


use File::Basename qw/dirname/;
use Getopt::Long;
use Pod::Usage qw/pod2usage/;

use warnings;
use strict;

my $BLACKLIST = [];

my $current_dir = `pwd`;
chomp $current_dir;

my($interactive, $modified_only, $print_only, $regex, $staged_only, $verbose);

my $hostname = $ENV{GIT_SCP_HOSTNAME};
my $username = $ENV{GIT_SCP_USERNAME} || $ENV{USER};
my $ssh_options = $ENV{GIT_SCP_SSH_OPTIONS} || '';

# assume mirrored directory setups
(my $base_directory) = $current_dir =~ m{$ENV{HOME}/(.*)};

GetOptions(
           'base=s'        => \$base_directory,
           'blacklist=s@'  => \$BLACKLIST,
           'help|?'        => sub { pod2usage(); },
           'hostname=s'    => \$hostname,
           'interactive|i' => \$interactive,
           'modified_only' => \$modified_only,
           'print_only|n'  => \$print_only,
           'regex=s'       => \$regex,
           'ssh_options=s' => \$ssh_options,
           'staged_only'   => \$staged_only,
           'username=s'    => \$username,
           'verbose'       => \$verbose
);

# make sure all printing happens when we're interactive.
$verbose = 1 if $interactive;

if( @ARGV and not $regex ){
    $regex = shift;
}

unless( $hostname ){
  print STDERR "You must give this script a --hostname!\n";
  exit 1;
}

$BLACKLIST = join '|', @$BLACKLIST;
if( $BLACKLIST ) {
    $BLACKLIST = qr/$BLACKLIST/;
}

my $remote_base_directory = qq{/home/$username};
my $TRANSFER_TO_URL = qq{$hostname:} . join '/', $remote_base_directory, $base_directory;
$TRANSFER_TO_URL = "$username\@$TRANSFER_TO_URL" if $username;

open PROC_OUT, 'git status --short |' or die "Couldn't deal with 'git status': $!";

# git may actually have the file in several states internally, but it will only
# be in one state on the disk; only need to transfer each file once.
my %transferred = ();

while( <PROC_OUT> ){
    my($x, $y, $filename) = m{^(.)(.)\s*(\S+)$};

    next if $modified_only and $y ne 'M' and $x ne 'M';
    next if $staged_only and $x eq ' ';
    next if $transferred{$filename}++;

    if( $BLACKLIST ) {
        next if $filename =~ $BLACKLIST;
    }

    if( defined $regex ) {
        print STDERR "Attempting to match /$regex/ against $filename..." if $verbose;
        unless($filename =~ /$regex/) {
            print STDERR "did NOT match!\n" if $verbose;
            next;
        }
        print STDERR "matched!\n" if $verbose;
    }

    my $transfer_this_file = 1;

    $filename =~ s{\\}{/}g;

    my $dirname = dirname($filename);
    $dirname = '' if $dirname eq '.';

    my $execute = qq{scp $ssh_options $filename $TRANSFER_TO_URL/$dirname};

    print "Executing: $execute\n" if $verbose or $print_only;

    if( $interactive ){
        my $input;
        print STDOUT "\nWould you like me to execute this command (y/N)? ";
        $input = <STDIN>;

        if( $input =~ m{^a}i ){ #allow an abort
            last;
        }

        unless( $input =~ m{^y}i ){
            $transfer_this_file = 0;
        }

        print STDOUT "\n"; #just some extra output whitespace
    }

    if( not $print_only and $transfer_this_file ){
        print STDOUT "Transferring...\n" if $verbose;
        system($execute);
    }
}
